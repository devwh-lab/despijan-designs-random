Step 1: Create a reusable DTO
import java.util.List;

public class PaginatedResponse<T> {
    private long total;          // total number of items
    private int currentPage;     // current page number (0 or 1 based)
    private int lastPage;        // total number of pages
    private int perPage;         // items per page
    private List<T> data;        // current page data
    private boolean hasNext;
    private boolean hasPrevious;

    public PaginatedResponse() {}

    public PaginatedResponse(long total, int currentPage, int lastPage,
                             int perPage, List<T> data,
                             boolean hasNext, boolean hasPrevious) {
        this.total = total;
        this.currentPage = currentPage;
        this.lastPage = lastPage;
        this.perPage = perPage;
        this.data = data;
        this.hasNext = hasNext;
        this.hasPrevious = hasPrevious;
    }

    // getters and setters ...
}

Step 2: Add a mapper from Page<T>
import org.springframework.data.domain.Page;

public class PaginatedResponseMapper {
    public static <T> PaginatedResponse<T> from(Page<T> page) {
        return new PaginatedResponse<>(
                page.getTotalElements(),
                page.getNumber() + 1,            // convert from 0-based to 1-based
                page.getTotalPages(),
                page.getSize(),
                page.getContent(),
                page.hasNext(),
                page.hasPrevious()
        );
    }
}

Step 3: Use in a Controller
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/users")
public class UserController {

    private final UserRepository userRepository;

    public UserController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @GetMapping
    public PaginatedResponse<User> getUsers(
            @RequestParam(defaultValue = "1") int page,
            @RequestParam(defaultValue = "10") int size) {

        Page<User> usersPage = userRepository.findAll(PageRequest.of(page - 1, size));

        return PaginatedResponseMapper.from(usersPage);
    }
}


âœ… Now you have a generic, reusable paginated DTO that works with any repository/entity.
Just call PaginatedResponseMapper.from(page) wherever you need pagination in your API.
